# 3. Есть два списка:
# tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена' ]
# klasses = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А' ]
# Необходимо реализовать генератор, возвращающий кортежи вида (<tutor>, <klass>),
# например:
# ('Иван', '9А')
# ('Анастасия', '7В')
# ...
# Количество генерируемых кортежей не должно быть больше длины списка tutors. Если в
# списке klasses меньше элементов, чем в списке tutors, необходимо вывести последние
# кортежи в виде: (<tutor>, None), например:
# ('Станислав', None)
# Доказать, что вы создали именно генератор. Проверить его работу вплоть до истощения.
# Подумать, в каких ситуациях генератор даст эффект.


def get_item_list(input_list, i):
    if i < len(input_list):
        val = input_list[i]
    else:
        val = None
    return val


tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена', 'Борис', 'Станислав']
klasses = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']
gen = ((tutors[i], get_item_list(klasses, i)) for i in range(len(tutors)))
print(type(gen))
for item in gen:
    print(item)
