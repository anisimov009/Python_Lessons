# 5. Создать вручную список, содержащий цены на товары (10–20 товаров), например:
# [57.8, 46.51, 97, ...]

# A. Вывести на экран эти цены через запятую в одну строку, цена должна отображаться в виде
# <r> руб <kk> коп (например «5 руб 04 коп»). Подумать, как из цены получить рубли и копейки,
# как добавить нули, если, например, получилось 7 копеек или 0 копеек (должно быть 07 коп
# или 00 коп).

# B. Вывести цены, отсортированные по возрастанию, новый список не создавать (доказать, что
# объект списка после сортировки остался тот же).

# C. Создать новый список, содержащий те же цены, но отсортированные по убыванию.

# D. Вывести цены пяти самых дорогих товаров. Сможете ли вывести цены этих товаров по
# возрастанию, написав минимум кода?

# Создаем список
prices = [70.08, 70.56, 66.33, 7.49, 32.36, 69.59, 38.25, 22.49, 32.53, 94.73,
          33.03, 74.2, 78.15, 44.22, 64.51, 58.15, 72.06, 12.11, 22.38, 74.46]

# Выводим в виде руб / коп
output = []
for price in prices:
    rub = int(price)
    kop = round((price - rub) * 100)
    output.append('{} руб {:02d} коп'.format(rub, kop))
print(prices)
print(', '.join(output))

# B. Вывести цены, отсортированные по возрастанию, новый список не создавать (доказать, что
# объект списка после сортировки остался тот же).
print()
print('id (до сортировки):   ', id(prices))
prices.sort()
print('id (после сортировки):', id(prices))
print(prices)

# C. Создать новый список, содержащий те же цены, но отсортированные по убыванию.
new_prices = sorted(prices, reverse=True)
print()
print('id (старый):', id(prices))
print('id (новый): ', id(new_prices))
print(new_prices)

# D. Вывести цены пяти самых дорогих товаров. Сможете ли вывести цены этих товаров по
# возрастанию, написав минимум кода?
print(new_prices[:5])